@using System.ComponentModel.DataAnnotations;
<PageScroll />

<h1>Loading Components</h1>
<p>
	Blazor components that renders Overlay for page load. HTML @("<button>") with customizable content for showing async operation in progress/loading state. For usage see source code and docs on
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Loading.md" target="_blank">Github</a>.
	<br /><strong>Majorsoft.Blazor.Components.Loading</strong> package is available on <a href="https://www.nuget.org/packages/Majorsoft.Blazor.Components.Loading" target="_blank">Nuget</a>
</p>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="loading-page" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Loading page</h3></Content>
	</PermaLinkElement>
	<p>Renders an Overlay layer for the whole page with customizable content for showing Page loading...</p>

	<LoadingPage OnLoading="@SendRequest">
		<LoadingContent>
			<i class="fa fa-spinner fa-3x fa-spin"></i>
			<h2 class="m-3">Loading...</h2>
		</LoadingContent>
	</LoadingPage>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Overlay color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_overlayColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Overlay opacity: @(_overlayOpacity/100)
			<input type="range" class="w-100" min="0" max="100" @bind="_overlayOpacity" @oninput="(e => _overlayOpacity = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Loading content: <textarea class="form-control w-100" @bind="_overlayContent" />
		</div>
	</div>

	<LoadingPage IsLoading="@_pageIsLoading" OverlayBackgroundColor="@_overlayColor" OverlayOpacity="@(_overlayOpacity / 100)">
		<LoadingContent>
			@((MarkupString)_overlayContent)
		</LoadingContent>
	</LoadingPage>

	<button class="btn btn-primary" @onclick="LoadForm">Prompt Page loader...</button>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="loading-element" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Loading element</h3></Content>
	</PermaLinkElement>
	<p>Renders an Overlay layer for the wrapped element (Table, Grid, etc.) with customizable content for showing loading...</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Overlay color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_overlayColorTable" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Overlay opacity: @(_overlayOpacityTable / 100)
			<input type="range" class="w-100" min="0" max="100" @bind="_overlayOpacityTable" @oninput="(e => _overlayOpacityTable = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Loading content: <textarea class="form-control w-100" @bind="_overlayContent2" />
		</div>
	</div>

	<LoadingElement IsLoading="@_elementIsLoading" OverlayBackgroundColor="@_overlayColorTable" OverlayOpacity="@(_overlayOpacityTable / 100)">
		<LoadingContent>
			@((MarkupString)_overlayContent2)
		</LoadingContent>
		<Content>
			<table class="table table-striped table-bordered">
				<thead class="">
					<tr>
						<th>Company</th>
						<th>Contact</th>
						<th>Country</th>
					</tr>
				</thead>
				<tr>
					<td>Alfreds Futterkiste</td>
					<td>Maria Anders</td>
					<td>Germany</td>
				</tr>
				<tr>
					<td>Centro comercial Moctezuma</td>
					<td>Francisco Chang</td>
					<td>Mexico</td>
				</tr>
				<tr>
					<td>Ernst Handel</td>
					<td>Roland Mendel</td>
					<td>Austria</td>
				</tr>
				<tr>
					<td>Island Trading</td>
					<td>Helen Bennett</td>
					<td>UK</td>
				</tr>
			</table>
		</Content>
	</LoadingElement>

	<button class="btn btn-primary" @onclick="LoadTable">Prompt Table loader...</button>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="loading-button" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Loading button</h3></Content>
	</PermaLinkElement>
	<p>Renders <strong>HTML Button</strong> with customizable content to show during async operation progress/loading...</p>

	<div class="pb-2">
		<div>Submit button will switch state automatically when clicked and registered callback finished executing. </div>
		<div>Disabled when Loading: <input type="checkbox" @bind="_disabledWhenLoading1"/></div>
		<LoadingButton class="btn btn-primary" Type="ButtonTypes.Submit" DisabledWhenLoading="_disabledWhenLoading1" OnClicked="@SendRequest">
			<Content>
				Fetch data
			</Content>
			<LoadingContent>
				<i class="fa fa-spinner fa-spin"></i> Loading...
			</LoadingContent>
		</LoadingButton>
	</div>

	<hr />
	<div class="pb-2">
		<div>Simple button will switch state automatically when clicked and registered callback finished executing. </div>
		<div>Disabled when Loading: <input type="checkbox" @bind="_disabledWhenLoading2"/></div>
		<LoadingButton class="btn btn-warning" DisabledWhenLoading="_disabledWhenLoading2" OnClicked="@SendRequest">
			<Content>
				Save
				<i class="fa fa-save"></i>
			</Content>
			<LoadingContent>
				<i class="fa fa-sync fa-spin"></i> Sending data...
			</LoadingContent>
		</LoadingButton>
	</div>

	<hr />
	<EditForm Model="@exampleModel" OnValidSubmit="@FormOnValidSubmit">
		<div>Form Submit button without Click handler states has to be switched 'Manualy' by acquiring @@ref="" and call Set()/Reset() functions.</div>
		<div>Disabled when Loading: <input type="checkbox" @bind="_disabledWhenLoading3"/></div>

		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="row">
			<div class="col-12 col-lg-8 col-xl-5">
				<div class="pb-2 pt-3">
					<InputText @bind-Value="exampleModel.Name" class="form-control w-100" />
				</div>
				<div class="pb-2">
					<LoadingButton @ref="_loadingButton" class="btn btn-secondary" 
								   IsLoading="@_isButtonLoading"
								   DisabledWhenLoading="_disabledWhenLoading3" 
								   Type="ButtonTypes.Submit">
						<Content>
							Submit
						</Content>
						<LoadingContent>
							<i class="fa fa-circle-notch fa-spin"></i> Post...
						</LoadingContent>
					</LoadingButton>
				</div>
			</div>
		</div>
	</EditForm>
</div>

@code {
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _loadingButton.InnerElementReference.FocusAsync();
		}
	}

	//Page Loading
	private string _overlayColor = "lightblue";
	private double _overlayOpacity = 50;
	private string _overlayContent = @"<i class=""fa fa-cog fa-3x fa-spin""></i>
<h2 class=""m-3"">Refreshing...</h2>";

	//Use it when loader should be manually triggered otherwise use LoadingPage.OnLoading event.
	private bool _pageIsLoading = false;
	private async Task LoadForm()
	{
		try
		{
			_pageIsLoading = true; //Set the layout to Loading state

			await Task.Delay(1000); //write your code here...
		}
		finally
		{
			_pageIsLoading = false; //Reset layout to default state in FINALLY block to avoid infinity loading state in case of any error!
		}
	}

	//Element Loading
	private string _overlayColorTable = "orange";
	private double _overlayOpacityTable = 50;
	private bool _elementIsLoading = false;
	private string _overlayContent2 = @"<i class=""fa fa-cog fa-3x fa-spin""></i>
<h2 class=""m-3"">Refreshing...</h2>";

	private async Task LoadTable()
	{
		try
		{
			_elementIsLoading = true; //Set the layout to Loading state

			await Task.Delay(1000); //write your code here...
		}
		finally
		{
			_elementIsLoading = false; //Reset layout to default state in FINALLY block to avoid infinity loading state in case of any error!
		}
	}

	//Button Loading
	private async Task SendRequest()
	{
		await Task.Delay(1500); //write your code here...
	}

	private bool _disabledWhenLoading1 = true;
	private bool _disabledWhenLoading2 = true;
	private bool _disabledWhenLoading3 = true;

	//Use it with EditForm otherwise use LoadingButton.OnClicked event.
	private LoadingButton _loadingButton;
	private bool _isButtonLoading = false;
	private async Task FormOnValidSubmit()
	{
		try
		{
			_isButtonLoading = true; //Set the button to Loading state

			await Task.Delay(1500); //write your code here...
		}
		finally
		{
			_isButtonLoading = false; //Reset button to default state in FINALLY block to avoid infinity loading state in case of any error!
		}
	}

	//Form model
	private ExampleModel exampleModel = new ExampleModel();
	public class ExampleModel
	{
		[Required]
		public string Name { get; set; }
	}
}
