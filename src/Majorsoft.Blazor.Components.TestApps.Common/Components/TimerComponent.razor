<h1>Timer Component</h1>
<p>
	Blazor component that can be used as a simple scheduler or performing periodically repeated tasks by calling custom async code. For usage see source code and docs on
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Timer.md" target="_blank">Github</a>.
	<br /><strong>Majorsoft.Blazor.Components.Timer</strong> package is available on <a href="https://www.nuget.org/packages/Majorsoft.Blazor.Components.Timer" target="_blank">Nuget</a>
</p>


<div class="container-fluid p-3 mb-3 border rounded">
	<span>Countdown from 10: <strong>@(_countDown > 0 ? $"T-{_countDown}..." : "Liftoff...")</strong></span>
	<AdvancedTimer IntervalInMilisec="1000" Occurring="Times.Exactly(10)" AutoStart="true" OnIntervalElapsed="@(c => CountDown(c))" />
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<span>Delayed counter (starts after 2 sec.): <strong>@_count</strong></span>
	<AdvancedTimer @ref="_counter" IntervalInMilisec="1000" DelayInMilisec="2000" Occurring="Times.Exactly(10)" OnIntervalElapsed="@(c => Counter(c))" />

	<br />
	<button class="btn btn-sm btn-primary" @onclick="CounterReset">Reset</button>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<div>
		<input type="range" min="10" max="2000" @bind="_clockInterval" @oninput="(e => _clockInterval = int.Parse(e.Value?.ToString()))"/> Clock interval: @_clockInterval ms.
	</div>
	<span>Infinite clock (Manual Start): <strong>@_time</strong></span>
	<AdvancedTimer IsEnabled="@_clockEnabled" IntervalInMilisec="@_clockInterval" Occurring="Times.Infinite()" AutoStart="false" OnIntervalElapsed="@Clock" />

	<br />
	<button class="btn btn-sm btn-primary" @onclick="StartStopClock">@_buttonText</button>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<span>Asyc evnet handling (Times.Once): <strong>@_asyncCalled</strong></span>
	<AdvancedTimer IntervalInMilisec="3000" Occurring="Times.Once()" OnIntervalElapsed="@(c => CallAsync(c))" />
</div>

@code {
	//Countdown
	private ulong _countDown = 10;
	private void CountDown(ulong count)
	{
		_countDown = 10 - count;
	}

	//Counter
	private AdvancedTimer _counter;
	private ulong _count = 0;
	private void Counter(ulong count)
	{
		_count = count;
	}
	private void CounterReset() => _counter.Reset();

	//Clock
	private double _clockInterval = 200;
	private string _time = DateTime.Now.ToString("hh:mm:ss.f");
	private bool _clockEnabled = false;
	private string _buttonText = "Start";
	private void Clock()
	{
		_time = DateTime.Now.ToString("hh:mm:ss.f");
	}
	private void StartStopClock()
	{
		if (_clockEnabled)
		{
			_clockEnabled = false;
			_buttonText = "Start";
		}
		else
		{
			_clockEnabled = true;
			_buttonText = "Stop";
		}
	}

	//Async call
	private string _asyncCalled = "Async call handled: 0 time.";
	private async Task CallAsync(ulong count)
	{
		await Task.Delay(1500); //should not be a longer running operation than Timer Interval
		_asyncCalled = $"Async call ended: {count} time(s)";
	}
}
