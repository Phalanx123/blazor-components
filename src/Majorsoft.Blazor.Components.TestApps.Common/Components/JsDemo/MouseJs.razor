<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="mouse-js" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Global Mouse JS</h3></Content>
	</PermaLinkElement>
	<p>
		<strong>Global Mouse JS</strong> is an <strong>injectable <code>IGlobalMouseEventHandler</code> service</strong> for global mouse callback event handlers.
		<br />
		Blazor supports <code>@@onclick</code>, <code>@@onmousemove</code>, etc. events but only for Blazor rendered elements. With this service you can get similar event notifications
		for the whole <strong>document/window</strong>.
	</p>

	<div class="row pb-2">
		<div class="col-12">
			<p><code>RegisterPageMouseDownAsync()</code>, <code>RegisterPageMouseUpAsync()</code>, <code>RegisterPageMouseMoveAsync()</code> will add event listeners to HTML document/window <code>mouse</code> events.</p>
			<button class="btn btn-primary" @onclick="GlobalClickEventHandler">@(_clickSubscribed ? "Unsubscribe from all event" : "Subscribe to all event")</button>
			<br />

			<label><strong>Global Mouse events log</strong>:</label>
			<textarea @ref="_log" @bind="_logMessage" class="form-control w-100 logText" readonly></textarea>
		</div>
	</div>
</div>

@implements IAsyncDisposable
@inject IGlobalMouseEventHandler _globalMouseEventHandler;

@code {
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
			return;

		await GlobalClickEventHandler();
	}

	//Mouse examples
	private ElementReference _log;
	private string _logMessage;
	private bool _clickSubscribed;
	private string _mouseDown, _mouseUp, _mouseMove;
	private async Task GlobalClickEventHandler()
	{
		if (_clickSubscribed)
		{
			await _globalMouseEventHandler.RemovePageMouseDownAsync(_mouseDown);
			await _globalMouseEventHandler.RemovePageMouseUpAsync(_mouseUp);
			await _globalMouseEventHandler.RemovePageMouseMoveAsync(_mouseMove);
		}
		else
		{
			_mouseDown = await _globalMouseEventHandler.RegisterPageMouseDownAsync(async (args) => await PageMouseEvents(args, "Mouse DOWN"));
			_mouseUp = await _globalMouseEventHandler.RegisterPageMouseUpAsync(async (args) => await PageMouseEvents(args, "Mouse UP"));
			_mouseMove = await _globalMouseEventHandler.RegisterPageMouseMoveAsync(async (args) => await PageMouseEvents(args, "Mouse MOVE"));
		}

		_clickSubscribed = !_clickSubscribed;
	}
	private async Task PageMouseEvents(MouseEventArgs args, string message)
	{
		_logMessage += $"{DateTime.Now.TimeOfDay}: Global Mouse event: {message} X pos: {args.ClientX}, Y pos: {args.ClientY}, Buttons: {args.Buttons}{Environment.NewLine}";
		StateHasChanged();

		await _log.ScrollToEndAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if (_globalMouseEventHandler is not null)
		{
			await _globalMouseEventHandler.DisposeAsync();
		}
	}
}