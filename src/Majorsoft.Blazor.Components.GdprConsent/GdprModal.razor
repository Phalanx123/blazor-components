<ModalDialog @ref="_modal" 
             OverlayBackgroundColor="@OverlayBackgroundColor" 
             OverlayOpacity="@OverlayOpacity"
             Height="@Height" 
             Width="@Width" 
             MinHeight="@MinHeight" 
             MinWidth="@MinWidth" 
             Centered="@Centered"
            CloseOnEscapeKey="false"
            CloseOnOverlayClick="false"
            ShowCloseButton="false"
            Animate="false"
            AllOtherAttributes="AllOtherAttributes">
    <Content>
        @Content
    </Content>
    <Footer>
        @Footer
    </Footer>
</ModalDialog>

@implements IDisposable

@inject ILogger<GdprModal> _logger
@inject IGdprConsentService _gdprConsentService

@code {
    private static bool Initialized = false;
    protected override void OnInitialized()
    {
        if (Initialized)
        {
            throw new ApplicationException($"Component: '{nameof(GdprModal)}' is not allowed to have multiple instances. Please define it one your e.g.: 'MainLayout.razor' or some common place.");
        }

        Initialized = true;
        _gdprConsentService.ConsentNotificationService.GdprConsentStateChanged += CheckConsent;

        WriteDiag("Initialized successfuly.");
    }

    private ModalDialog _modal;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CheckConsent();
    }

    /// <summary>
    /// HTML Content of the collapse panel.
    /// </summary>
    [Parameter] public RenderFragment Content { get; set; }
    /// <summary>
    /// HTML content to show on the Modal footer (bottom). Can be any valid HTML but should be only custom action buttons.
    /// Must not be defined if you want to leave it out.
    /// </summary>
    [Parameter] public RenderFragment Footer { get; set; }

    /// <summary>
    /// Sets the style of the HTML div background-color. Use HTML specified: Color Names, RGB, HEX or with HSL values.
    /// </summary>
    [Parameter]
    public string OverlayBackgroundColor { get; set; } = "128,128,128";//gray

    /// <summary>
    /// Opacity of the overlay div. Value should be between 0..1. Where 0 means the overlay layer is not visible.
    /// </summary>
    [Parameter] public double OverlayOpacity { get; set; } = 0.7;

    /// <summary>
    /// GDPR Cookies consent details. An enumerable list of Cookie types with Accepted flag.
    /// </summary>
    [Parameter] public IEnumerable<GdprConsentDetail> ConsentDetails { get; set; } = new GdprConsentDetail[] { new GdprConsentDetail() { ConsentName = "Cookies.All" } };

    /// <summary>
    /// Gets or Sets Consent choice validity date. After this date Consent will be asked again.
    /// </summary>
    [Parameter] public DateTime AnswerValidUntil { get; set; } = DateTime.Now.AddMonths(1);

    //Size
    /// <summary>
    /// Modal dialog window Height in px if set to 0 Height is set auto.
    /// </summary>
    [Parameter] public double Height { get; set; } = 0;
    /// <summary>
    /// Modal dialog window Width in px if set to 0 Width is set auto.
    /// </summary>
    [Parameter] public double Width { get; set; } = 0;
    /// <summary>
    /// Modal dialog window minimum Height in px.
    /// </summary>
    [Parameter] public double MinHeight { get; set; } = 200;
    /// <summary>
    /// Modal dialog window minimum Width in px.
    /// </summary>
    [Parameter] public double MinWidth { get; set; } = 200;

    /// <summary>
    /// When true Modal dialog will be vertically centered, otherwise shown near to the top. Modal dialog horizontally always centered.
    /// </summary>
    [Parameter] public bool Centered { get; set; } = false;

    /// <summary>
    /// Arbitrary HTML attributes e.g.: tabindex="1" will be passed to the corresponding rendered HTML element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AllOtherAttributes { get; set; }


    /// <summary>
    /// Saves user chosen GDPR Consent details. It should be `await`-ed.
    /// </summary>
    /// <returns>ValueTask</returns>
    public async ValueTask SaveChoice()
    {
        await _gdprConsentService.SetGdprConsentDataAsync(CreateGdprConsentData());
        WriteDiag("GDPR Consent was accepted.");
    }

    private GdprConsentData CreateGdprConsentData()
    {
        return new GdprConsentData()
        {
            AnsweredAt = DateTime.Now,
            AnswerValidUntil = AnswerValidUntil,
            GdprConsentDetails = ConsentDetails,
        };
    }

    private async Task CheckConsent()
    {
        var gdprConsent = await _gdprConsentService.GetGdprConsentDataAsync();
        var show = !gdprConsent?.IsValid ?? true;

        WriteDiag($"GDPR Consent value changed Banner should show: '{show}'.");

        if(show && !_modal.IsOpen)
        {
            await _modal.Open();
            StateHasChanged();
        }
        else if (!show && _modal.IsOpen)
        {
            await _modal.Close();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Component dispose
    /// </summary>
    public void Dispose()
    {
        Initialized = false;
        _gdprConsentService.ConsentNotificationService.GdprConsentStateChanged -= CheckConsent;
    }

    private void WriteDiag(string message)
    {
        _logger.LogDebug($"Component {this.GetType()}: {message}");
    }
}