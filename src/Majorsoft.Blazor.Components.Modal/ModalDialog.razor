@inject ILogger<ModalDialog> _logger;
@inject IFocusHandler _focusHandler;
@inject ITransitionEventsService _transitionService;

@implements IAsyncDisposable

@if (_isOpened)
{
	<div @ref="_overlayDiv" class="bmodal @(Animate ? "fade": "")" @onclick="OverlayClicked" @onkeyup="OverlayKeyPress"
		 style="opacity: @_opacity; background-color: rgba(@OverlayBackgroundColor, @OverlayOpacity.ToString("0.00", CultureInfo.InvariantCulture))"
		 @attributes=AllOtherAttributes>
		<div @ref="_modal" class="bmodal-content dynamicStyle" tabindex="100" @onclick:stopPropagation="true">

			@if (Header != null || ShowCloseButton)
			{
				<div class="bmodal-header">
					@Header
					@if (ShowCloseButton)
					{
						<button type="button" @onclick="CloseClicked" class="close"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
					}
				</div>
			}
			<div class="bmodal-body">@Content</div>
			@if (Footer != null)
			{
				<div class="bmodal-footer">@Footer</div>
			}
		</div>
	</div>

	<style>
		.fade {
			transition: opacity @(_animationDuration.ToString().Replace(",", "."))s linear;
		}
		.dynamicStyle {
			top: @(_dialogTop);
			left: 50%;
			min-width:@(MinWidth)px;
			min-height:@(MinHeight)px;
			width:@(Width == 0 ? "auto": $"{Width}px");
			height:@(Height == 0 ? "auto": $"{Height}px");
			transition: top @((_animationDuration).ToString().Replace(',', '.'))s ease-in-out;
		}
	</style>
}

@code {
	private bool _disposedValue;
	private bool _isOpened = false;
	private double _opacity = 0;
	private double _animationDuration = 0.25;
	private ElementReference _overlayDiv;
	private ElementReference _modal;

	//Overlay style
	private string _overlayColor = "128,128,128";//gray
	/// <summary>
	/// Sets the style of the HTML div background-color. Use HTML specified: Color Names, RGB or with HEX values.
	/// </summary>
	[Parameter]
	public string OverlayBackgroundColor
	{
		get => _overlayColor;
		set => _overlayColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	/// <summary>
	/// Opacity of the overlay div. Value should be between 0..1. Where 0 means the overlay layer is not visible.
	/// </summary>
	[Parameter] public double OverlayOpacity { get; set; } = 0.9;

	//Close settings
	/// <summary>
	/// When true Modal dialog will be closed when Overlay (background) clicked. It works even if Overlay not visible (Opacity is set to 0)
	/// </summary>
	[Parameter] public bool CloseOnOverlayClick { get; set; } = true;
	/// <summary>
	/// When true Modal dialog will be closed when Esc (Escape) key pressed.
	/// </summary>
	[Parameter] public bool CloseOnEscapeKey { get; set; } = true;

	//Size
	/// <summary>
	/// Modal dialog window Height in px if set to 0 Height is set auto.
	/// </summary>
	[Parameter] public double Height { get; set; } = 0;
	/// <summary>
	/// Modal dialog window Width in px if set to 0 Width is set auto.
	/// </summary>
	[Parameter] public double Width { get; set; } = 0;
	/// <summary>
	/// Modal dialog window minimum Height in px.
	/// </summary>
	[Parameter] public double MinHeight { get; set; } = 200;
	/// <summary>
	/// Modal dialog window minimum Width in px.
	/// </summary>
	[Parameter] public double MinWidth { get; set; } = 200;

	/// <summary>
	/// When true Modal dialog will automatically set focus to itself when it opens, and set it bact to the last focused element when it closes. 
	/// In general this should never be set to false as it makes the Modal less accessible to screen-readers, etc.
	/// </summary>
	[Parameter] public bool Focus { get; set; } = true;
	/// <summary>
	/// When true Modal dialog will appear and disappear by using smooth CSS slide and fade transitions.
	/// </summary>
	[Parameter] public bool Animate { get; set; } = true;
	/// <summary>
	/// When true Modal dialog will be vertically centered, otherwise shown near to the top. Modal dialog horizontally always centered.
	/// </summary>
	[Parameter] public bool Centered { get; set; } = false;

	//Contents
	/// <summary>
	/// HTML content to show on the Modal header (top), right to the close button (if visible).
	/// Can be any valid HTML but should be only Title text. Must not be defined if you want to leave it out. Also ShowCloseButton must be set to false.
	/// </summary>
	[Parameter] public RenderFragment Header { get; set; }
	/// <summary>
	/// Required HTML content to show on the Modal dialog. Can be any valid HTML.
	/// </summary>
	[Parameter] public RenderFragment Content { get; set; }
	/// <summary>
	/// HTML content to show on the Modal footer (bottom). Can be any valid HTML but should be only custom action buttons.
	/// Must not be defined if you want to leave it out.
	/// </summary>
	[Parameter] public RenderFragment Footer { get; set; }
	/// <summary>
	/// When true Modal dialog will show Header (even if Header is not defined) with closed x button.
	/// </summary>
	[Parameter] public bool ShowCloseButton { get; set; } = true;

	//Events
	/// <summary>
	/// Callback function called when the Modal dialog is opening.
	/// </summary>
	[Parameter] public EventCallback OnOpen { get; set; }
	/// <summary>
	/// Callback function called when the Modal dialog is closing.
	/// </summary>
	[Parameter] public EventCallback OnClose { get; set; }
	/// <summary>
	/// Callback function called when close x button was clicked.
	/// </summary>
	[Parameter] public EventCallback<MouseEventArgs> OnCloseButtonClicked { get; set; }
	/// <summary>
	/// Callback function called when Overlay (background) was clicked.
	/// </summary>
	[Parameter] public EventCallback<MouseEventArgs> OnOverlayClicked { get; set; }
	/// <summary>
	/// Callback function called when Esc key was pressed.
	/// </summary>
	[Parameter] public EventCallback<KeyboardEventArgs> OnEscapeKeyPress { get; set; }
	/// <summary>
	/// Callback function called when CSS transitions are ended. It will be triggered when dialog opened or closed.
	/// </summary>
	[Parameter] public EventCallback<TransitionEventArgs[]> OnTransitionEnded { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	/// <summary>
	/// Returns true if the Modal dialog is opened, otherwise false.
	/// </summary>
	public bool IsOpen => _isOpened;

	protected override async Task OnInitializedAsync()
	{
		WriteDiag($"OnInitializedAsync currently IsOpened: '{_isOpened}'.");
		_dialogTop = _dialogDefaultTop;
	}

	private async Task OverlayClicked(MouseEventArgs e)
	{
		if (CloseOnOverlayClick && _isOpened)
		{
			WriteDiag($"Overlay DIV clicked dialog closing, currently IsOpened: '{_isOpened}'.");
			if (OnOverlayClicked.HasDelegate)
			{
				await OnOverlayClicked.InvokeAsync(e);
			}

			await Close();
		}
	}
	private async Task CloseClicked(MouseEventArgs e)
	{
		if (ShowCloseButton && _isOpened)
		{
			WriteDiag($"Close button clicked dialog closing, currently IsOpened: '{_isOpened}'.");

			if (OnCloseButtonClicked.HasDelegate)
			{
				await OnCloseButtonClicked.InvokeAsync(e);
			}

			await Close();
		}
	}
	private async Task OverlayKeyPress(KeyboardEventArgs e)
	{
		if (CloseOnEscapeKey && (e.Key?.Equals("Escape", StringComparison.OrdinalIgnoreCase) ?? false) && _isOpened)
		{
			WriteDiag($"Overlay DIV key pressed event: '{e.Key}' dialog closing, currently IsOpened: '{_isOpened}'.");

			if (OnEscapeKeyPress.HasDelegate)
			{
				await OnEscapeKeyPress.InvokeAsync(e);
			}

			await Close();
		}
	}

	//Dialog style animation params
	private string _dialogTop;
	private string _dialogDefaultTop => Centered ? "25%;" : "5%;";
	private string GetDialogTop()
	{
		var height = Height;
		if(MinHeight > height)
		{
			height = MinHeight;
		}

		return Centered ? "50%;" : $"calc({(Height == 0 ? 15 : 2)}% + {(int)(height / 2)}px);";
	}

	private async Task TransitionEnded(TransitionEventArgs[] args)
	{
		if (Animate)
		{
			if (OnTransitionEnded.HasDelegate)
			{
				await OnTransitionEnded.InvokeAsync(args);
			}

			WriteDiag($"Dialog Transition has ended IsOpened: '{_isOpened}', TransitionEventArgs[] count: '{args.Length}'!!");
			if (_opacity == 1) //Visible
			{
				await OpenInternal();
			}
			else if (_opacity == 0) //Hidden
			{
				await CloseInternal();
			}
		}
	}

	private KeyValuePair<ElementReference, string>[] _elementRefsWithProperties;
	/// <summary>
	/// When method called Modal dialog will be opened. It should be await-ed.
	/// </summary>
	/// <returns>Task</returns>
	public async Task Open()
	{
		_dialogTop = _dialogDefaultTop;//Reset dialog to page top
		_isOpened = true;

		WriteDiag($"Opening dialog currently, Opacity: {_opacity}, IsOpened: '{_isOpened}'.");
		StateHasChanged(); //Force UI to render

		if (Animate)
		{
			WriteDiag($"Opening dialog Waiting some time for UI to render and set Opacity to 1 IsOpened: '{_isOpened}'.");
			await Task.Delay((int)(_animationDuration * 100)); //HACK: Must wait, time is not exact.. Render happens before but DIV is still not visible!!

			_elementRefsWithProperties = new KeyValuePair<ElementReference, string>[]
			{
				new KeyValuePair<ElementReference, string>(_overlayDiv, "opacity"),
				new KeyValuePair<ElementReference, string>(_modal, "top")
				};
			await _transitionService.RegisterTransitionsWhenAllEndedAsync(TransitionEnded, _elementRefsWithProperties);

			_dialogTop = GetDialogTop();
			_opacity = 1.0; //dialog must be visible

			return;
		}
		else
		{
			_dialogTop = GetDialogTop();
			_opacity = 1.0; //dialog must be visible
		}

		await OpenInternal();
	}
	private async Task OpenInternal()
	{
		if (Focus)
		{
			//Store previous focused element
			await _focusHandler.StoreFocusedElementAsync();

			//Set focus to DIV
			WriteDiag($"Opening dialog setting Focus to dialog, previous IsOpened: '{_isOpened}'.");
			await _modal.FocusAsync();
		}

		if (OnOpen.HasDelegate)
		{
			WriteDiag($"Opening dialog calling {nameof(OnOpen)} event handlers IsOpened: '{_isOpened}'.");
			await OnOpen.InvokeAsync();
		}
	}

	/// <summary>
	/// When method called Modal dialog will be closed. It should be await-ed.
	/// </summary>
	/// <returns>Task</returns>
	public async Task Close()
	{
		_opacity = 0; //Dialog must be hidden

		if (Animate)
		{
			WriteDiag($"Closing dialog Waiting for UI to play CSS fade and set Opacity to 0 IsOpened: '{_isOpened}'.");
			_dialogTop = _dialogDefaultTop;

			return;
		}

		await CloseInternal();
	}
	private async Task CloseInternal()
	{
		if (Animate)
		{
			await _transitionService.RemoveTransitionsWhenAllEndedAsync(_elementRefsWithProperties);
			_elementRefsWithProperties = null;
		}

		_isOpened = false;
		WriteDiag($"Closing dialog currently IsOpened: '{_isOpened}'.");

		if (Focus)
		{
			await _focusHandler.RestoreStoredElementFocusAsync();
		}

		if (OnClose.HasDelegate)
		{
			WriteDiag($"Closing dialog calling {nameof(Close)} event handlers IsOpened: '{_isOpened}'.");
			await OnClose.InvokeAsync();
		}

		StateHasChanged(); //Force UI to render
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}

	/// <summary>
	/// Async dispose
	/// </summary>
	/// <returns></returns>
	public async ValueTask DisposeAsync()
	{
		WriteDiag($"Closing dialog running DisposeAsync() IsOpened: '{_isOpened}'.");

		if (_focusHandler is not null)
		{
			await _focusHandler.DisposeAsync();
		}
		if (_transitionService is not null)
		{
			await _transitionService.DisposeAsync();
		}
	}
}