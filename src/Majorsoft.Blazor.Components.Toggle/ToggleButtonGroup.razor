<div id="@($"toggleButton_{_componentId}")" @ref="_inputRef" tabindex="99" disabled="@Disabled" @attributes=AllOtherAttributes>
	<CascadingValue Value="this">
		@ToggleButtons
	</CascadingValue>
</div>

@inject ILogger<ToggleButtonGroup> _logger;

@code {
	private string _componentId = Guid.NewGuid().ToString("n");
	protected ElementReference _inputRef;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _inputRef;

	/// <summary>
	/// Required list of ToggleButtons components. See usage example.
	/// </summary>
	[Parameter] public RenderFragment ToggleButtons { get; set; }

	/// <summary>
	/// Determines whether all the rendered HTML elements should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled { get; set; } = false;

	private bool _mustToggled = false;
	/// <summary>
	/// Determines whether at least one <see cref="ToggleButton"/> must be toggled all the time or all buttons can be Off.
	/// </summary>
	[Parameter] public bool MustToggled 
	{ 
		get => _mustToggled;
		set	
		{
			_mustToggled = value;
			if(_mustToggled && _activeButton is null && _buttons.Count > 0)
			{
				var button = Buttons.First();
				button.Checked = true;
				
				InvokeAsync(async() => await ButtonToggled(button));
			}
		}
	}

	/// <summary>
	/// Callback function called when component toggled. Actual toggled (selected) button is the callback parameter. When nothing selected value is `NULL`.
	/// </summary>
	[Parameter] public EventCallback<ToggleButton?> OnToggleChanged { get; set; }

	private ToggleButton? _activeButton;
	/// <summary>
	/// Returns currently active "toggled" <see cref="ToggleButton"/> element ref also can be used to set which button should be active "toggled".
	/// </summary>
	[Parameter]
	public ToggleButton? ActiveButton
	{
		get => _activeButton;
		set
		{
			if (value != _activeButton)
			{
				_activeButton = value;
				if (_activeButton != null)
				{
					_activeButton.Checked = true;
				}

				ButtonToggled(_activeButton);
			}
		}
	}

	private IList<ToggleButton> _buttons = new List<ToggleButton>();
	/// <summary>
	/// Returns the number of <see cref="ToggleButton"/> int the given `ToggleButtonGroup`.
	/// </summary>
	public int ButtonCount => _buttons.Count;
	/// <summary>
	/// Returns all the <see cref="ToggleButton"/> reference added to the group. It can be used for activating any of the elements.
	/// </summary>
	public IEnumerable<ToggleButton> Buttons => _buttons;

	internal async Task AddButton(ToggleButton button)
	{
		WriteDiag($"{nameof(ButtonToggled)}: {button}");

		if (button is not null)
		{
			_buttons.Add(button);
			if(MustToggled && ButtonCount == 1)
			{
				button.Checked = true;
				await ButtonToggled(button);
			}
		}
	}

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	internal async Task ButtonToggled(ToggleButton? button)
	{
		WriteDiag($"{nameof(ButtonToggled)}: {button}");

		if (button is not null && Buttons.Contains(button))
		{
			var toggled = true;
			if (button.Checked)
			{
				ActiveButton = button;
				foreach (var item in Buttons)
				{
					if (item != button)
					{
						item.Checked = false;
					}
				}
			}
			else
			{
				if (MustToggled)
				{
					ActiveButton = button;
					button.Checked = true;
					toggled = false;
				}
				else
				{
					ActiveButton = null;
				}
			}

			if (toggled && OnToggleChanged.HasDelegate)
			{
				await OnToggleChanged.InvokeAsync(ActiveButton);
			}
		}
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}