<PageScroll />

<h1>Toggle Components</h1>
<p>
	Blazor component that renders customizable Toggle Switch and Toggle Button components. For usage see source code and docs on
	<a href="https://github.com/majorimi/blazor-components/blob/master/.github/docs/Toggle.md" target="_blank">Github</a>.
	<br /><strong>Majorsoft.Blazor.Components.Toggle</strong> package is available on <a href="https://www.nuget.org/packages/Majorsoft.Blazor.Components.Toggle" target="_blank">Nuget</a>
</p>

<h3>Toggle features:</h3>
<ul>
	<li><NavLink href="toggle#toggle-switch">Toggle Switch</NavLink></li>
	<li><NavLink href="toggle#toggle-button">Toggle Button</NavLink></li>
	<li><NavLink href="toggle#toggle-buttongroup">Toggle Button group</NavLink></li>
</ul>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="toggle-switch" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Toggle switch</h3></Content>
	</PermaLinkElement>
	<p>Renders <strong>HTML input styled as Toggle switch</strong> with customizable size and color, etc.</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle switch On color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_onColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle switch Off color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_offColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle switch Width: @(_width)px
			<input type="range" class="w-100" min="30" max="100" @bind="_width" @oninput="(e => _width = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle switch Height: @(_height)px
			<input type="range" class="w-100" min="15" max="50" @bind="_height" @oninput="(e => _height = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Disabled: <input class="mr-3" type="checkbox" @bind="_disabled" />
			Is Checked: <input class="mr-3" type="checkbox" @bind="_isChecked" />
		</div>
	</div>

	<div class="row pb-4">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle switch Style: <select class="form-control selectpicker w-100" @bind="_styleType">
				@foreach (var item in Enum.GetValues(typeof(ToggleSwitchStyle)))
				{
					<option value="@item">@item</option>
				}
			</select>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<ToggleSwitch @ref="_toggleSwitch"
						  Checked="_isChecked"
						  OnColor="@_onColor"
						  OffColor="@_offColor"
						  Width="_width"
						  Height="_height"
						  HandleStyle="_styleType"
						  Disabled="_disabled"
						  OnToggleChanged="OnToggleSwitched">
			</ToggleSwitch>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<label><strong>Toggle switch Event log</strong>:</label>
			<textarea @ref="_log1" @bind="_swithch1Log" style="height:200px;" class="form-control w-100" readonly></textarea>
		</div>
	</div>
</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="toggle-button" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Toggle button</h3></Content>
	</PermaLinkElement>
	<p>Renders <strong>HTML button styled as Toggle button</strong> with custom content and customizable size, color, etc.</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle button On color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_buttonOnColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle button Off color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_buttonOffColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle button Hover color (Name, RGB, Hex, HSL): <input class="form-control w-100" @bind="_buttonHoverColor" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle button Width: @(_buttonWidth)px
			<input type="range" class="w-100" min="16" max="50" @bind="_buttonWidth" @oninput="(e => _buttonWidth = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>
	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Toggle button Height: @(_buttonHeight)px
			<input type="range" class="w-100" min="16" max="50" @bind="_buttonHeight" @oninput="(e => _buttonHeight = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Disabled: <input class="mr-3" type="checkbox" @bind="_buttonDisabled" />
			Is Checked: <input class="mr-3" type="checkbox" @bind="_isButtonChecked" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<ToggleButton @ref="_toggleButton"
						  Checked="@_isButtonChecked"
						  OnColor="@_buttonOnColor"
						  OffColor="@_buttonOffColor"
						  HoverColor="@_buttonHoverColor"
						  Width="@_buttonWidth"
						  Height="@_buttonHeight"
						  Disabled="@_buttonDisabled"
						  OnToggleChanged="OnToggleClicked">
				<Content>
					<img src="https://raw.githubusercontent.com/majorimi/blazor-components/master/src/Majorsoft.Blazor.Components.TestApps.Common/wwwroot/place-marker.png" 
						 width="@(_buttonWidth - 5)px" height="@(_buttonHeight - 5)px" />
				</Content>
			</ToggleButton>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<label><strong>Toggle button Event log</strong>:</label>
			<textarea @ref="_log2" @bind="_button1Log" style="height:200px;" class="form-control w-100" readonly></textarea>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			Other Toggle button examples:
			<ToggleButton>
				<Content><strong>B</strong></Content>
			</ToggleButton>
			<ToggleButton>
				<Content><i>I</i></Content>
			</ToggleButton>
			<ToggleButton>
				<Content><u>U</u></Content>
			</ToggleButton>
		</div>
	</div>

</div>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="toggle-buttongroup" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Toggle button group</h3></Content>
	</PermaLinkElement>
	<p>Renders a container for <strong>HTML button styled as Toggle button</strong> with custom content and customizable size, color, etc. Also allows only one toggle button to be Checked.</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Number of buttons: <strong>@_btnCount</strong>
			<br />
			Disabled: <input class="mr-2" type="checkbox" @bind="_buttonGroupDisabled" />
			One button always must toggled: <input class="mr-2" type="checkbox" @bind="_mustToggled" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			@*ToggleButtons can be configured as regular ToggleButton*@
			<ToggleButtonGroup @ref="_btnGroup" MustToggled="_mustToggled" OnToggleChanged="OnToggleGroupClicked"
							   Disabled="@_buttonGroupDisabled" ActiveButton="@_activeButton">
				<ToggleButtons>
					<ToggleButton @ref="_btn1" OnColor="@_btnGroupOnColor">
						<Content><strong>1</strong></Content>
					</ToggleButton>
					<ToggleButton @ref="_btn2" OnColor="@_btnGroupOnColor">
						<Content><strong>2</strong></Content>
					</ToggleButton>
					<ToggleButton @ref="_btn3" OnColor="@_btnGroupOnColor">
						<Content><strong>3</strong></Content>
					</ToggleButton>
				</ToggleButtons>
			</ToggleButtonGroup>
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12">
			<label><strong>Toggle Button group Event log</strong>:</label>
			<textarea @ref="_log3" @bind="_buttonGroupLog" style="height:200px;" class="form-control w-100" readonly></textarea>
		</div>
	</div>

</div>

@using System.Linq;

@code {
	//Switch
	private ToggleSwitch _toggleSwitch;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _toggleSwitch.InnerElementReference.FocusAsync();
			
			//Group
			_activeButton = _btn1;
			_btnCount = _btnGroup.ButtonCount;
			StateHasChanged();
		}
	}

	private string _onColor = "DodgerBlue";
	private string _offColor = "DarkGray";
	private int _width = 50;
	private int _height = 22;
	private bool _isChecked = true;
	private bool _disabled = false;
	private ToggleSwitchStyle _styleType = ToggleSwitchStyle.Circle;

	private ElementReference _log1;
	private string _swithch1Log;

	private async Task OnToggleSwitched(bool val)
	{
		_isChecked = val;
		_swithch1Log = await WriteLog(_swithch1Log, $"Toggle Switched event currently Checked: {val}");
	}

	//Button
	private ToggleButton _toggleButton;

	private string _buttonOnColor = "#5ec2f7";
	private string _buttonOffColor = "white";
	private string _buttonHoverColor = "WhiteSmoke";
	private int _buttonWidth = 30;
	private int _buttonHeight = 30;
	private bool _isButtonChecked = true;
	private bool _buttonDisabled = false;

	private ElementReference _log2;
	private string _button1Log;

	private async Task OnToggleClicked(bool val)
	{
		_isButtonChecked = val;
		_button1Log = await WriteLog(_button1Log, $"Toggle Button event currently Checked: {val}");
	}

	//Button group
	private ToggleButtonGroup _btnGroup;
	private ToggleButton _activeButton;
	private ToggleButton _btn1;
	private ToggleButton _btn2;
	private ToggleButton _btn3;
	private bool _buttonGroupDisabled = false;
	private bool _mustToggled = false;
	private int _btnCount = 0;
	private string _btnGroupOnColor = "#a4edd5";

	private ElementReference _log3;
	private string _buttonGroupLog;

	private async Task OnToggleGroupClicked(ToggleButton active)
	{
		_activeButton = active;
		var index = _btnGroup.Buttons.ToList().IndexOf(active);
		_buttonGroupLog = await WriteLog(_buttonGroupLog, $"Toggle Button group event Active button index: {index}");
	}


	private async Task<string> WriteLog(string log, string message)
	{
		log += $"{DateTime.Now.TimeOfDay}: {message}. \r\n";
		await _log1.ScrollToEndAsync();
		await _log2.ScrollToEndAsync();
		await _log3.ScrollToEndAsync();

		return log;
	}
}