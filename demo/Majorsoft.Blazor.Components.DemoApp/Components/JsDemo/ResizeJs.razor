<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="resize-js" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Resize JS</h3></Content>
	</PermaLinkElement>
	<p>
		<strong>Resize JS</strong> is an <strong>injectable <code>IResizeHandler</code> service</strong> for Window (global) and HTML Elements resize event callback handlers.
	</p>

	<div class="row pb-2">
		<div class="col-12">
			<p><code>RegisterPageResizeAsync()</code> will add event listener to HTML document/window <code>resize events.</code></p>
			<p><code>RegisterResizeAsync()</code> will add event listener to the given HTML Element <code>resize events.</code></p>

			<label>Resizabel Textarea with event listener:</label>
			<br />
			<textarea @ref="_resizeElement" style="resize:both;" readonly>Grab right bottom corner to resize element...</textarea>

			<br />
			<button class="btn btn-primary" @onclick="ResizeEventHandler">@(_resizeSubscribed ? "Unsubscribe from resize" : "Subscribe to resize")</button>
			<br />
			<label><strong>Resize Events log</strong>:</label>
			<br />
			<label>Browser Window initial size: <strong>@_pageSize</strong></label>
			<textarea @ref="_log" @bind="_logMessage" class="form-control w-100 logText" readonly></textarea>
		</div>
	</div>

</div>

@implements IAsyncDisposable
@inject IResizeHandler _resizeHandler

@code {
	private string _resizeEventId = null;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
			return;

		await ResizeEventHandler();
		_pageSize = await _resizeHandler.GetPageSizeAsync();
	}

	//Resize JS
	private PageSize _pageSize;
	private bool _resizeSubscribed;
	private async Task ResizeEventHandler()
	{
		if (_resizeSubscribed)
		{
			await _resizeHandler.RemovePageResizeAsync(_resizeEventId);
			await _resizeHandler.RemoveResizeAsync(_resizeElement);
		}
		else
		{
			_resizeEventId = await _resizeHandler.RegisterPageResizeAsync(arg => Resized(arg, "Window resized"));
			await _resizeHandler.RegisterResizeAsync(_resizeElement, arg => Resized(arg, "Textarea resized"));
		}

		_resizeSubscribed = !_resizeSubscribed;
	}

	private ElementReference _resizeElement;
	private ElementReference _log;
	private string _logMessage;
	private async Task Resized(ResizeEventArgs args, string message)
	{
		_logMessage += $"{DateTime.Now.TimeOfDay}: {message} - Width: {args.Width}, Height: {args.Height}{Environment.NewLine}";
		StateHasChanged();

		await _log.ScrollToEndAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if (_resizeHandler is not null)
		{
			await _resizeHandler.DisposeAsync();
		}
	}
}