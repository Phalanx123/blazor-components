<div class="container-fluid p-3 mb-3 border rounded">
    <PermaLinkElement PermaLinkName="head-js" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
        <Content><h3>HTML Head JS</h3></Content>
    </PermaLinkElement>
    <p>
        <strong>HTML Head JS</strong> is an <strong>injectable <code>IHtmlHeadService</code> service</strong> for accessing and setting HTML document <code>Head</code> tags.
        It is useful when Blazor application has dynamic content and you need to change <strong>Title</strong>, <strong>FavIcon</strong> or <strong>Meta tags</strong> for SEO (Search Engine Optimization).
    </p>

    <div class="row pb-2">
        <div class="col-12">
            <label>Current HTML page Title:</label>
            <input class="form-control w-100 mb-2" @bind-value="_title" type="text" placeholder="HTML page Tilte" />
            <button class="btn btn-primary" @onclick="SetPageTitle">Set HTML page Title</button>
        </div>
    </div>

    <div class="row pb-2">
        <div class="col-12">
            <label>Current HTML page FavIcon (e.g: https://c.s-microsoft.com/favicon.ico):</label>
            <input class="form-control w-100 mb-2" @bind-value="_favIcon " type="text" placeholder="HTML page Favicon" />
            <button class="btn btn-primary" @onclick="SetPageFavIcon">Set HTML page FavIcon</button>
        </div>
    </div>
</div>

@implements IAsyncDisposable
@inject IHtmlHeadService _htmlHeadService;

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _title = await _htmlHeadService.GetHtmlTitleAsync();
            _icons = await _htmlHeadService.GetHtmlFavIconsAsync();
            _favIcon = _icons.FirstOrDefault()?.Href;

            StateHasChanged();
        }
    }

    private string _title;
    private string _favIcon;
    private IEnumerable<HtmlHeadLinkTag> _icons;

    private async Task SetPageTitle()
    {
        await _htmlHeadService.SetHtmlTitleAsync(_title);
    }
    private async Task SetPageFavIcon()
    {
        await _htmlHeadService.SetHtmlFavIconsAsync(new HtmlHeadLinkTag[] {
            new HtmlHeadLinkTag()
            {
                Href = _favIcon,
                Sizes ="16x16",
                Rel = HtmlHeadLinkTagRelTypes.Icon.ToString(),
            }
        });
    }

    public async ValueTask DisposeAsync()
    {
        if (_htmlHeadService is not null)
        {
            await _htmlHeadService.DisposeAsync();
        }
    }
}